include(CheckCCompilerFlag)
include(GNUInstallDirs)

#
# liblua
#
# Note that this target also references the header files as sources so that
# any IDE-based projects generated by CMake know that they exist.
#

add_library(liblua)

set_target_properties(liblua
  PROPERTIES
    OUTPUT_NAME $<IF:$<PLATFORM_ID:Windows>,lua51,lua5.1>
    C_EXTENSIONS OFF
    C_STANDARD 11
    C_STANDARD_REQUIRED ON
    ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib"
    LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib"
    PDB_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
)

target_compile_definitions(liblua
  PUBLIC
    # Note that the original Makefile build defines LUA_USE_LINUX for Mac
    # builds instead of LUA_USE_MACOSX which is supposedly intended for OSX
    # versions 10.3 or older.
    $<$<PLATFORM_ID:Darwin,Linux>:LUA_USE_LINUX>
    # Define LUA_BUILD_AS_DLL if liblua was build as a shared library target
    # for Windows platforms, where we assume MSVC and (unsupportedly) MinGW
    # or Clang will accept __declspec attributes.
    $<$<AND:$<PLATFORM_ID:Windows>,$<STREQUAL:$<TARGET_PROPERTY:liblua,TYPE>,SHARED_LIBRARY>>:LUA_BUILD_AS_DLL>
  PRIVATE
    # Enable internal assertions on debug builds.
    $<$<CONFIG:debug>:LUA_USE_ASSERT>
    $<$<CONFIG:debug>:LUA_USE_APICHECK>
)

target_include_directories(liblua
  PUBLIC
    "../include"
  PRIVATE
    "../extern/utf8"
)

target_link_libraries(liblua
  PRIVATE
    $<$<PLATFORM_ID:Darwin,Linux>:dl>
    $<$<PLATFORM_ID:Darwin,Linux>:m>
)

target_sources(liblua
  PRIVATE
    # Public headers
    "../include/lua.h"
    "../include/lauxlib.h"
    "../include/lualib.h"
    "../include/luaconf.h"
    "../include/lua.hpp"

    # Core sources
    "lapi.c"        "lapi.h"
    "lcode.c"       "lcode.h"
    "ldebug.c"      "ldebug.h"
    "ldo.c"         "ldo.h"
    "ldump.c"
    "lfunc.c"       "lfunc.h"
    "lgc.c"         "lgc.h"
    "llex.c"        "llex.h"
                    "llimits.h"
    "lmem.c"        "lmem.h"
    "lobject.c"     "lobject.h"
    "lopcodes.c"    "lopcodes.h"
    "lparser.c"     "lparser.h"
    "lstate.c"      "lstate.h"
    "lstring.c"     "lstring.h"
    "ltable.c"      "ltable.h"
    "ltm.c"         "ltm.h"
    "lundump.c"     "lundump.h"
    "lvm.c"         "lvm.h"
    "lzio.c"        "lzio.h"

    # Library sources
    "lauxlib.c"
    "lbaselib.c"
    "lbitlib.c"
    "ldblib.c"
    "liolib.c"
    "lmathlib.c"
    "loadlib.c"
    "loslib.c"
    "lstrlib.c"
    "ltablib.c"
    "linit.c"
)

# Extract public headers from the source listing and mark them as their own
# source group for better IDE support. We'll also flag them as public headers
# for this target so that they're installed automatically.

get_target_property(liblua_SOURCES liblua SOURCES)
set(liblua_HEADERS "")

foreach(source IN LISTS liblua_SOURCES)
  if(source MATCHES "include/")
    list(APPEND liblua_HEADERS ${source})
  endif()
endforeach()

source_group(
  TREE    "${PROJECT_SOURCE_DIR}/include"
  PREFIX  "Header Files"
  FILES   ${liblua_HEADERS}
)

set_target_properties(liblua
  PROPERTIES
    PUBLIC_HEADER "${liblua_HEADERS}"  # Must be a string representation of a list.
)

#
# lua
#

add_executable(lua)

set_target_properties(lua
  PROPERTIES
    OUTPUT_NAME $<IF:$<PLATFORM_ID:Windows>,lua,lua5.1>
    C_EXTENSIONS OFF
    C_STANDARD 11
    C_STANDARD_REQUIRED ON
    BUILD_RPATH_USE_ORIGIN ON
    INSTALL_RPATH "\$ORIGIN/../${CMAKE_INSTALL_LIBDIR}"
    PDB_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
)

target_link_libraries(lua
  PRIVATE
    liblua
    $<$<PLATFORM_ID:Darwin,Linux>:readline>
)

target_sources(lua
  PRIVATE
    "lua.c"
)

#
# luac
#
# The luac compiler does a static rebuild of the liblua sources due to
# requiring access to symbols that are otherwise unexported in a shared
# library build.
#

add_executable(luac)

set_target_properties(luac
  PROPERTIES
    OUTPUT_NAME $<IF:$<PLATFORM_ID:Windows>,luac,luac5.1>
    C_EXTENSIONS OFF
    C_STANDARD 11
    C_STANDARD_REQUIRED ON
    PDB_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
)

target_link_libraries(luac
  PRIVATE
    liblua
    $<$<PLATFORM_ID:Darwin,Linux>:dl>
    $<$<PLATFORM_ID:Darwin,Linux>:m>
)

target_sources(luac
  PRIVATE
    "luac.c"
    "print.c"
    $<TARGET_OBJECTS:liblua>
)

#
# Installation
#

# Add install target support that'll populate a destination prefix with a
# standard distribution of bin/, lib/, and include/ directories.

install(
  TARGETS
    liblua
    lua
    luac
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  OPTIONAL
)
