include(CheckCCompilerFlag)
include(GNUInstallDirs)

# Enable fast math flags for all targets in this subdirectory. This makes the
# handling of NaN values consistent both ingame and out of game, which may
# be significant in a few niche cases.

check_c_compiler_flag("-ffast-math" LUA_COMPILER_HAS_FFAST_MATH)
check_c_compiler_flag("/fp:fast" LUA_COMPILER_HAS_FP_FAST)

if(LUA_COMPILER_HAS_FFAST_MATH)
  add_compile_options(-ffast-math)
elseif(LUA_COMPILER_HAS_FP_FAST)
  add_compile_options(/fp:fast)
endif()

# The source and header listings are defined as variables as several part of
# the build need to refer to these for project generation tweaks later on.
#
# Additionally, compile definitions, include directories, and link libraries
# for the liblua target are also made into variables; this is because these
# are shared between both the liblua and luac target as luac requires special
# care when building.

set(liblua_HEADERS
  "../include/lua.h"
  "../include/lauxlib.h"
  "../include/lualib.h"
  "../include/luaconf.h"
  "../include/lua.hpp"
)

set(liblua_SOURCES
  # Core sources.
  "lapi.c"        "lapi.h"
  "lcode.c"       "lcode.h"
  "ldebug.c"      "ldebug.h"
  "ldo.c"         "ldo.h"
  "ldump.c"
  "lfunc.c"       "lfunc.h"
  "lgc.c"         "lgc.h"
  "llex.c"        "llex.h"
                  "llimits.h"
  "lmem.c"        "lmem.h"
  "lobject.c"     "lobject.h"
  "lopcodes.c"    "lopcodes.h"
  "lparser.c"     "lparser.h"
  "lstate.c"      "lstate.h"
  "lstring.c"     "lstring.h"
  "ltable.c"      "ltable.h"
  "ltm.c"         "ltm.h"
  "lundump.c"     "lundump.h"
  "lvm.c"         "lvm.h"
  "lzio.c"        "lzio.h"

  # Library sources.
  "lauxlib.c"
  "lbaselib.c"
  "lbitlib.c"
  "ldblib.c"
  "liolib.c"
  "lmathlib.c"
  "loadlib.c"
  "loslib.c"
  "lstrlib.c"
  "ltablib.c"
  "linit.c"
)

set(liblua_COMPILE_DEFINITIONS
  PUBLIC
    # Note that the original Makefile build defines LUA_USE_LINUX for Mac
    # builds instead of LUA_USE_MACOSX which is supposedly intended for OSX
    # versions 10.3 or older.
    $<$<PLATFORM_ID:Darwin,Linux>:LUA_USE_LINUX>
  PRIVATE
    # Enable internal assertions on debug builds.
    $<$<CONFIG:Debug>:LUA_USE_ASSERT>
    $<$<CONFIG:Debug>:LUA_USE_APICHECK>
)

set(liblua_INCLUDE_DIRECTORIES
  PUBLIC
    "../include"
  PRIVATE
    "../extern/utf8"
)

set(liblua_LINK_LIBRARIES
  PRIVATE
    $<$<PLATFORM_ID:Darwin,Linux>:dl>
    $<$<PLATFORM_ID:Darwin,Linux>:m>
)

#
# liblua
#
# Note that this target also references the header files as sources so that
# any IDE-based projects generated by CMake know that they exist.
#

add_library(liblua)

set_target_properties(liblua
  PROPERTIES
    OUTPUT_NAME $<IF:$<PLATFORM_ID:Windows>,lua51,lua5.1>
    C_EXTENSIONS OFF
    C_STANDARD 11
    C_STANDARD_REQUIRED ON
    PUBLIC_HEADER "${liblua_HEADERS}"  # Must be a string representation of a list.
    ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib"
    LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib"
    PDB_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
)

# Define LUA_BUILD_AS_DLL if liblua was build as a shared library target
# for Windows platforms, where we assume MSVC and (unsupportedly) MinGW
# or Clang will accept __declspec attributes.

target_compile_definitions(liblua
  PUBLIC
    $<$<AND:$<PLATFORM_ID:Windows>,$<STREQUAL:$<TARGET_PROPERTY:liblua,TYPE>,SHARED_LIBRARY>>:LUA_BUILD_AS_DLL>
)

target_compile_definitions(liblua ${liblua_COMPILE_DEFINITIONS})
target_include_directories(liblua ${liblua_INCLUDE_DIRECTORIES})
target_link_libraries(liblua ${liblua_LINK_LIBRARIES})
target_sources(liblua PRIVATE ${liblua_HEADERS} ${liblua_SOURCES})

#
# lua
#

add_executable(lua)

set_target_properties(lua
  PROPERTIES
    OUTPUT_NAME $<IF:$<PLATFORM_ID:Windows>,lua,lua5.1>
    C_EXTENSIONS OFF
    C_STANDARD 11
    C_STANDARD_REQUIRED ON
    BUILD_RPATH_USE_ORIGIN ON
    INSTALL_RPATH "\$ORIGIN/../${CMAKE_INSTALL_LIBDIR}"
    PDB_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
)

target_link_libraries(lua
  PRIVATE
    liblua
    $<$<PLATFORM_ID:Darwin,Linux>:readline>
)

target_sources(lua
  PRIVATE
    "lua.c"
)

#
# luac
#
# The luac compiler does a static rebuild of the liblua sources due to
# requiring access to symbols that are otherwise unexported in a shared
# library build.
#

add_executable(luac)

set_target_properties(luac
  PROPERTIES
    OUTPUT_NAME $<IF:$<PLATFORM_ID:Windows>,luac,luac5.1>
    C_EXTENSIONS OFF
    C_STANDARD 11
    C_STANDARD_REQUIRED ON
    PDB_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
    RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin"
)

target_compile_definitions(luac ${liblua_COMPILE_DEFINITIONS})
target_include_directories(luac ${liblua_INCLUDE_DIRECTORIES})
target_link_libraries(luac ${liblua_LINK_LIBRARIES})

target_sources(luac
  PRIVATE
    ${liblua_SOURCES}
    "luac.c"
    "print.c"
)

#
# Misc.
#

# Mark public headers for better IDE support.

source_group(
  TREE    "${PROJECT_SOURCE_DIR}/include"
  PREFIX  "Header Files"
  FILES   ${liblua_HEADERS}
)

# Add `make install` support that'll populate an install prefix with a
# standard distribution of bin/, lib/, and include/ directories.

install(
  TARGETS
    liblua
    lua
    luac
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  OPTIONAL
)
